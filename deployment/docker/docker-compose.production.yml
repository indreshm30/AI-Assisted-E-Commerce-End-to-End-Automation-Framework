# Production Docker Compose for AI-Assisted E-Commerce Platform
version: '3.8'

services:
  # PostgreSQL Database (Production replacement for SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ecommerce_production
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_production_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_production"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-secure_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ../ecommerce_platform/backend
      dockerfile: ../../deployment/docker/Dockerfile.backend
    container_name: ecommerce-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://ecommerce_user:${POSTGRES_PASSWORD:-secure_production_password}@postgres:5432/ecommerce_production
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-super_secure_jwt_secret_change_in_production}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost:3002}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - ecommerce-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Frontend Next.js Service
  frontend:
    build:
      context: ../ecommerce_platform/frontend
      dockerfile: ../../deployment/docker/Dockerfile.frontend
    container_name: ecommerce-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${BACKEND_URL:-http://localhost:3001}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    ports:
      - "3002:3002"
    networks:
      - ecommerce-network
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # MCP AI Server
  mcp-server:
    build:
      context: ../ecommerce_platform/mcp_server
      dockerfile: ../../deployment/docker/Dockerfile.mcp
    container_name: ecommerce-mcp
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: postgresql://ecommerce_user:${POSTGRES_PASSWORD:-secure_production_password}@postgres:5432/ecommerce_production
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      MCP_API_KEY: ${MCP_API_KEY:-dev-key-for-testing}
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379
    volumes:
      - mcp_data:/app/data
      - mcp_logs:/app/logs
    ports:
      - "3003:3003"
    networks:
      - ecommerce-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # AI Testing Framework
  ai-testing:
    build:
      context: ../ecommerce_automation/ai_enhanced_tests
      dockerfile: ../../deployment/docker/Dockerfile.testing
    container_name: ecommerce-ai-testing
    environment:
      MCP_SERVER_URL: http://mcp-server:3003
      FRONTEND_URL: http://frontend:3002
      BACKEND_URL: http://backend:3001
      PYTHONPATH: /app
    volumes:
      - testing_data:/app/adaptive_data
      - testing_reports:/app/reports
      - testing_generated:/app/ai_generated_tests
    ports:
      - "8000:8000"
    networks:
      - ecommerce-network
    depends_on:
      - backend
      - frontend
      - mcp-server
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ecommerce-network
    depends_on:
      - frontend
      - backend
      - mcp-server
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ecommerce-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin_change_me}
      GF_SERVER_ROOT_URL: ${GRAFANA_URL:-http://localhost:3000}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - ecommerce-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Elasticsearch for Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ecommerce-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ecommerce-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - ecommerce-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: ecommerce-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-secure_production_password}
    volumes:
      - ./backup:/backup
      - ./backup/scripts:/scripts:ro
    networks:
      - ecommerce-network
    depends_on:
      - postgres
    restart: "no"
    command: |
      sh -c "
        while true; do
          pg_dump -h postgres -U ecommerce_user -d ecommerce_production > /backup/ecommerce_backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backup -name '*.sql' -mtime +7 -delete
          sleep 86400
        done
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  mcp_data:
    driver: local
  mcp_logs:
    driver: local
  testing_data:
    driver: local
  testing_reports:
    driver: local
  testing_generated:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16